@startuml CompanyAnalysisAI_ClassDiagram

!define ENTITY_COLOR #E1F5FE
!define SERVICE_COLOR #FFF3E0
!define UTIL_COLOR #F3E5F5

skinparam class {
    BackgroundColor<<Entity>> ENTITY_COLOR
    BackgroundColor<<Service>> SERVICE_COLOR
    BackgroundColor<<Util>> UTIL_COLOR
    BorderColor #455A64
    ArrowColor #455A64
}

package "Web Layer" {
    class FlaskApp <<Service>> {
        +analyzer: CompanyAnalyzer
        +status_queues: Dict
        +analysis_results: Dict
        --
        +index(): render_template
        +analyze_stream(): POST /analyze_stream
        +status_stream(): GET /status/<session_id>
        +get_result(): GET /result/<session_id>
        +download_file(): GET /download/<session_id>/<file_type>
    }
}

package "Analysis Layer" {
    class CompanyAnalyzer <<Service>> {
        -dart_api_key: str
        -gemini_api_key: str
        -base_url: str
        -_vector_store: VectorStore
        -_naver_crawler: NaverFinanceCrawler
        -model: GenerativeModel
        --
        +vector_store: @property
        +naver_crawler: @property
        --
        **DART API Methods**
        +get_corp_code(company_name): Tuple
        +get_reports(corp_code, report_types, user_query, years): List
        +download_report(rcept_no, save_path, ...): Tuple
        +get_historical_annual_reports(corp_code, years): List
        +get_analyst_reports(corp_code, count, user_query, years): List
        +download_multiple_reports(reports, max_reports, company_name): List
        --
        **Gemini Analysis Methods**
        +_get_company_name_variations(company_name): List
        +_extract_time_range(user_query): int
        +_recommend_report_types(user_query, years): Tuple
        +_extract_industry_keywords(user_query, company_name, base_industry): List
        +analyze_with_gemini(company_name, report_content, user_query, additional_reports): str
        --
        **Industry Classification**
        +get_company_industry(corp_code, company_name): str
        +_infer_industry_with_gemini(company_name): str
        --
        **Utilities**
        +extract_text_from_pdf(pdf_path): str
        +_extract_text_from_xml(xml_content): str
        +_parse_table_to_markdown(table_element): str
        +_simple_text_extraction(xml_content): str
        +cleanup_downloads(keep_latest): void
        --
        **Main Analysis**
        +analyze_company(company_name, user_query, status_callback): Dict
    }
}

package "Crawler Layer" {
    class NaverFinanceCrawler <<Service>> {
        -gemini_model: GenerativeModel
        -headers: Dict
        --
        +_get_company_name_variations(company_name): List
        +_extract_text_from_pdf(pdf_path): str
        --
        **Naver Finance Crawling**
        +search_company_reports(company_name, max_reports): List
        +search_industry_reports(industry_keywords, max_reports): List
    }
}

package "Storage Layer" {
    class VectorStore <<Service>> {
        -persist_directory: str
        -metadata_path: str
        -embeddings: HuggingFaceEmbeddings
        -text_splitter: RecursiveCharacterTextSplitter
        -vectorstore: FAISS
        -metadata: Dict
        --
        +_load_or_create_vectorstore(): FAISS
        +_load_metadata(): Dict
        +_save_metadata(): void
        +_save_vectorstore(): void
        --
        **Caching Features**
        +get_naver_reports_from_cache(company_name, report_type, industry_keywords): List
        +check_report_exists(rcept_no): bool
        +get_report_from_cache(rcept_no): str
        --
        **Vector Search**
        +add_report(rcept_no, report_name, company_name, report_date, content, report_type, industry_keywords): void
        +search_similar_reports(query, company_name, k): List[Tuple]
        +get_report_chunks(rcept_no, max_chunks): List
        --
        **Statistics**
        +get_statistics(): Dict
        +list_all_reports(): List
        +delete_report(rcept_no): bool
    }
}

package "External Services" {
    class "DART API" as DartAPI <<External>> {
        +corpCode.xml
        +list.json
        +document.xml
        +company.json
    }
    
    class "Gemini API" as GeminiAPI <<External>> {
        +generate_content()
        +list_models()
    }
    
    class "Naver Finance" as NaverFinance <<External>> {
        +company_list.naver
        +industry_list.naver
        +PDF files
    }
    
    class "FAISS" as FAISS <<External>> {
        +similarity_search()
        +add_documents()
        +save_local()
        +load_local()
    }
}

' Relationships
FlaskApp --> CompanyAnalyzer : uses
CompanyAnalyzer --> VectorStore : uses (lazy)
CompanyAnalyzer --> NaverFinanceCrawler : uses (lazy)
CompanyAnalyzer --> DartAPI : calls
CompanyAnalyzer --> GeminiAPI : calls
NaverFinanceCrawler --> NaverFinance : crawls
NaverFinanceCrawler --> GeminiAPI : calls
VectorStore --> FAISS : uses

' Key Data Flow
note right of CompanyAnalyzer
  **Core Class**
  - DART disclosure report processing
  - Gemini AI analysis
  - Securities report integration
  - VectorDB caching
end note

note right of NaverFinanceCrawler
  **Securities Report Crawler**
  - Stock analysis reports
  - Industry analysis reports
  - EUC-KR encoding
  - Gemini search recommendation
end note

note right of VectorStore
  **Vector Database**
  - FAISS + LangChain
  - Korean embedding
  - Metadata management
  - Industry keyword search
end note

@enduml
